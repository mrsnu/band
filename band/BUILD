load("//band:band.bzl", "band_copts")

# TODO: Find a way to automatically add `--define tflite=true`
# to band/backend/tfl
config_setting(
    name = "tflite",
    define_values = {"tflite": "true"},
    visibility = ["//visibility:public"],
)

cc_library(
    name = "common",
    srcs = [
        "context.cc",
        "error_reporter.cc",
        "logger.cc",
    ],
    hdrs = [
        "common.h",
        "context.h",
        "error_reporter.h",
        "logger.h",
    ],
    copts = band_copts(),
    visibility = [
        "//band:__subpackages__",
    ],
    deps = [
        "//band/c:common",
    ],
)

cc_library(
    name = "interface",
    srcs = [
        "interface/backend_factory.cc",
        "interface/tensor.cc",
    ],
    hdrs = [
        "interface/backend.h",
        "interface/backend_factory.h",
        "interface/interpreter.h",
        "interface/model.h",
        "interface/tensor.h",
        "interface/tensor_view.h",
    ],
    copts = band_copts(),
    deps = [
        ":common",
    ],
)

cc_library(
    name = "cpu",
    srcs = [
        "cpu.cc",
    ],
    hdrs = [
        "cpu.h",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "config",
    srcs = [
        "config.cc",
        "json_util.cc",
    ],
    hdrs = [
        "config.h",
        "json_util.h",
    ],
    deps = [
        ":common",
        ":cpu",
        "@jsoncpp_git//:jsoncpp",
    ],
)

cc_library(
    name = "time",
    srcs = [
        "time.cc",
    ],
    hdrs = [
        "time.h",
    ],
)

cc_library(
    name = "model",
    srcs = [
        "model.cc",
    ],
    hdrs = [
        "model.h",
    ],
    deps = [
        ":interface",
    ],
)

cc_library(
    name = "worker",
    srcs = [
        "worker.cc",
        "worker_device_queue.cc",
        "worker_global_queue.cc",
    ],
    hdrs = [
        "worker.h",
    ],
    deps = [
        ":common",
        ":config",
        ":cpu",
        ":time",
    ],
)

cc_library(
    name = "scheduler",
    srcs = [
        "scheduler/fixed_device_global_queue_scheduler.cc",
        "scheduler/fixed_device_scheduler.cc",
        "scheduler/round_robin_scheduler.cc",
    ],
    hdrs = [
        "scheduler/fixed_device_scheduler.h",
        "scheduler/round_robin_scheduler.h",
        "scheduler/scheduler.h",
    ],
    deps = [
        ":common",
        ":time",
    ],
)

cc_library(
    name = "planner",
    srcs = [
        "planner.cc",
        "safe_bool.cc",
    ],
    hdrs = [
        "planner.h",
        "safe_bool.h",
    ],
    deps = [
        ":common",
        ":scheduler",
        ":worker",
    ],
)

cc_library(
    name = "tensor",
    srcs = [
        "tensor.cc",
    ],
    hdrs = [
        "tensor.h",
    ],
    deps = [
        ":common",
        ":interface",
    ],
)

cc_library(
    name = "framework",
    srcs = [
        "engine.cc",
        "profiler.cc",
        "tensor_ring_buffer.cc",
    ],
    hdrs = [
        "engine.h",
        "profiler.h",
        "tensor_ring_buffer.h",
    ],
    visibility = [
        "//band:__subpackages__",
    ],
    deps =
        [
            ":common",
            ":config",
            ":interface",
            ":model",
            ":planner",
            ":scheduler",
            ":tensor",
            ":time",
            ":worker",
        ],
)

cc_test(
    name = "planner_test",
    size = "small",
    srcs = ["test/planner_test.cc"],
    deps = [
        ":planner",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "scheduler_test",
    size = "small",
    srcs = ["test/scheduler_test.cc"],
    deps = [
        ":scheduler",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "worker_test",
    size = "small",
    srcs = ["test/worker_test.cc"],
    deps = [
        ":worker",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "time_test",
    size = "small",
    srcs = ["test/time_test.cc"],
    deps = [
        ":time",
        "@com_google_googletest//:gtest",
    ],
)
